export type CodeEditorAction = {
  readonly id: string;
  readonly alias: string;
  readonly label: string;
  readonly isSupported: boolean;
  readonly exists: boolean;
  run(): Promise<void>;
};

/**
 * Extracted from source:
 *    monaco-editor/dev/vs/editor/editor.main.js
 *
 * Invoke on editor using:
 *    instance.getAction('<action>').run();
 * or
 *    instance.trigger('source', '<action>')
 */
export type MonacoAction =
  | 'editor.action.goToReferences'
  | 'editor.action.goToReferences'
  | 'editor.action.goToReferences'
  | 'editor.action.selectAll'
  | 'editor.action.setSelectionAnchor'
  | 'editor.action.goToSelectionAnchor'
  | 'editor.action.selectFromAnchorToCursor'
  | 'editor.action.cancelSelectionAnchor'
  | 'editor.action.moveCarretLeftAction'
  | 'editor.action.moveCarretRightAction'
  | 'editor.action.transposeLetters'
  | 'editor.action.clipboardCutAction'
  | 'editor.action.clipboardCopyAction'
  | 'editor.action.clipboardPasteAction'
  | 'editor.action.clipboardCopyWithSyntaxHighlightingAction'
  | 'editor.action.codeAction'
  | 'editor.action.refactor'
  | 'editor.action.sourceAction'
  | 'editor.action.organizeImports'
  | 'editor.action.fixAll'
  | 'editor.action.commentLine'
  | 'editor.action.addCommentLine'
  | 'editor.action.removeCommentLine'
  | 'editor.action.blockComment'
  | 'editor.action.showContextMenu'
  | 'editor.action.fontZoomIn'
  | 'editor.action.fontZoomOut'
  | 'editor.action.fontZoomReset'
  | 'editor.action.formatDocument'
  | 'editor.action.formatSelection'
  | 'editor.action.format'
  | 'editor.action.formatDocument'
  | 'editor.action.formatSelection'
  | 'editor.action.indentationToSpaces'
  | 'editor.action.indentationToTabs'
  | 'editor.action.indentUsingTabs'
  | 'editor.action.indentUsingSpaces'
  | 'editor.action.detectIndentation'
  | 'editor.action.reindentlines'
  | 'editor.action.reindentselectedlines'
  | 'editor.action.copyLinesUpAction'
  | 'editor.action.copyLinesDownAction'
  | 'editor.action.duplicateSelection'
  | 'editor.action.moveLinesUpAction'
  | 'editor.action.moveLinesDownAction'
  | 'editor.action.sortLinesAscending'
  | 'editor.action.sortLinesDescending'
  | 'editor.action.trimTrailingWhitespace'
  | 'editor.action.deleteLines'
  | 'editor.action.indentLines'
  | 'editor.action.outdentLines'
  | 'editor.action.insertLineBefore'
  | 'editor.action.insertLineAfter'
  | 'editor.action.joinLines'
  | 'editor.action.transpose'
  | 'editor.action.transformToUppercase'
  | 'editor.action.transformToLowercase'
  | 'editor.action.transformToTitlecase'
  | 'editor.action.smartSelect.expand'
  | 'editor.action.smartSelect.grow'
  | 'editor.action.smartSelect.expand'
  | 'editor.action.smartSelect.shrink'
  | 'editor.action.toggleTabFocusMode'
  | 'editor.action.forceRetokenize'
  | 'editor.action.toggleHighContrast'
  | 'editor.action.diffReview.next'
  | 'editor.action.diffReview.prev'
  | 'editor.action.jumpToBracket'
  | 'editor.action.selectToBracket'
  | 'editor.action.jumpToBracket'
  | 'editor.action.nextMatchFindAction'
  | 'editor.action.previousMatchFindAction'
  | 'editor.action.nextSelectionMatchFindAction'
  | 'editor.action.previousSelectionMatchFindAction'
  | 'editor.action.startFindReplaceAction'
  | 'editor.action.replaceOne'
  | 'editor.action.replaceAll'
  | 'editor.action.selectAllMatches'
  | 'editor.action.inPlaceReplace.up'
  | 'editor.action.inPlaceReplace.down'
  | 'editor.action.openLink'
  | 'editor.action.quickFix'
  | 'editor.action.autoFix'
  | 'editor.action.triggerParameterHints'
  | 'editor.action.onTypeRename'
  | 'editor.action.rename'
  | 'editor.action.wordHighlight.next'
  | 'editor.action.wordHighlight.prev'
  | 'editor.action.wordHighlight.trigger'
  | 'editor.action.showAccessibilityHelp'
  | 'editor.action.inspectTokens'
  | 'editor.action.gotoLine'
  | 'editor.action.quickOutline'
  | 'editor.action.marker.next'
  | 'editor.action.marker.prev'
  | 'editor.action.marker.nextInFiles'
  | 'editor.action.marker.prevInFiles'
  | 'editor.action.goToDeclaration'
  | 'editor.action.revealDefinition'
  | 'editor.action.openDeclarationToTheSide'
  | 'editor.action.revealDefinitionAside'
  | 'editor.action.previewDeclaration'
  | 'editor.action.peekDefinition'
  | 'editor.action.revealDeclaration'
  | 'editor.action.peekDeclaration'
  | 'editor.action.goToTypeDefinition'
  | 'editor.action.peekTypeDefinition'
  | 'editor.action.goToImplementation'
  | 'editor.action.peekImplementation'
  | 'editor.action.goToReferences'
  | 'editor.action.referenceSearch.trigger'
  | 'editor.action.goToLocation'
  | 'editor.action.goToLocations'
  | 'editor.action.peekLocations'
  | 'editor.action.goToLocations'
  | 'editor.action.findReferences'
  | 'editor.action.showReferences'
  | 'editor.action.peekLocations'
  | 'editor.action.showHover'
  | 'editor.action.showDefinitionPreviewHover'
  | 'editor.action.insertCursorAbove'
  | 'editor.action.insertCursorBelow'
  | 'editor.action.insertCursorAtEndOfEachLineSelected'
  | 'editor.action.addCursorsToBottom'
  | 'editor.action.addCursorsToTop'
  | 'editor.action.addSelectionToNextFindMatch'
  | 'editor.action.addSelectionToPreviousFindMatch'
  | 'editor.action.moveSelectionToNextFindMatch'
  | 'editor.action.moveSelectionToPreviousFindMatch'
  | 'editor.action.selectHighlights'
  | 'editor.action.changeAll'
  | 'editor.action.quickCommand'
  | 'editor.action.triggerSuggest';
