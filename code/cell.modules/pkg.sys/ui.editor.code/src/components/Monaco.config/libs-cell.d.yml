libs:
  index.d.ts: ''
  types.cell.coord.d.ts: |-
    export declare type CoordAxis = 'COLUMN' | 'ROW';
    export declare type CoordType = 'CELL' | CoordAxis;
    export declare type ICoordPosition = {
        column: number;
        row: number;
    };
    export declare type ICoordAddress = {
        key: string;
        ns: string;
    };
    export declare type ICoord = ICoordPosition & ICoordAddress;
    export declare type ICoordSiblings = {
        cell: string;
        top?: string;
        right?: string;
        bottom?: string;
        left?: string;
        toString: () => string;
    };
    export declare type CoordEdge = 'TOP' | 'RIGHT' | 'BOTTOM' | 'LEFT';
    export declare type ICoordOffsetOptions = {
        totalColumns?: number;
        totalRows?: number;
        clamp?: boolean;
    };
    export declare type ICoordSiblingOptions = ICoordOffsetOptions & {
        offset?: number;
    };
  types.cell.d.ts: |-
    import { Diff } from '@platform/util.diff/lib/types';
    export declare type ICellProps = {
        value?: CellValue;
        type?: CellType;
    };
    export declare type ICellData<P extends ICellProps = ICellProps> = {
        value?: CellValue;
        props?: P;
        hash?: string;
        error?: IError;
        links?: IUriMap;
    };
    export declare type ICellDiff<P extends ICellProps = ICellProps> = {
        readonly left: ICellData<P>;
        readonly right: ICellData<P>;
        readonly isDifferent: boolean;
        readonly list: Diff<ICellData<P>>[];
    };
  types.cell.get.d.ts: >-
    export declare type GetCell<P extends ICellProps = ICellProps> = (key:
    string) => Promise<ICellData<P> | undefined>;

    export declare type GetCells<P extends ICellProps = ICellProps> = () =>
    Promise<ICellMap<ICellData<P>>>;
  types.cli.d.ts: |-
    declare type O = Record<string, unknown>;
    export declare type CellCli = O;
    export {};
  types.column.d.ts: |-
    export declare type IColumnProps = {
        title?: string;
        def?: CellTypeDef | CellTypeDef[];
    };
    export declare type IColumnData<P extends IColumnProps = IColumnProps> = {
        props?: P;
        hash?: string;
        error?: IError;
    };
  types.compile.d.ts: export declare type CompileTemp = 'TEMP';
  types.db.d.ts: >-
    import { IModel, IModelLinksSchema, IModelChildrenSchema } from
    '@platform/fsdb.types';

    declare type O = Record<string, unknown>;

    export declare type IDbModelChange = {
        uri: string;
        field: string;
        from?: any;
        to?: any;
    };

    export declare type IDbModelNs<P extends O = any> =
    IModel<IDbModelNsProps<P>, IDbModelNsDoc<P>, IDbModelNsLinks,
    IDbModelNsChildren>;

    export declare type IDbModelNsProps<P extends O = any> = INs & P;

    export declare type IDbModelNsDoc<P extends O = any> = IDbModelNsProps<P>;

    export declare type IDbModelNsLinks = IModelLinksSchema;

    export declare type IDbModelNsChildren = {
        cells: IDbModelCell[];
        columns: IDbModelColumn[];
        rows: IDbModelRow[];
        files: IDbModelFile[];
    };

    export declare type IDbModelCell<P extends O = any> =
    IModel<IDbModelCellProps<P>, IDbModelCellDoc<P>, IDbModelCellLinks,
    IDbModelCellChilden>;

    export declare type IDbModelCellProps<P extends O = any> =
    ICellData<IDbModelCellDataProps<P>>;

    export declare type IDbModelCellDataProps<P extends O = any> = ICellProps &
    P;

    export declare type IDbModelCellDoc<P extends O = any> =
    IDbModelCellProps<P> & {
        nsRefs?: string[];
    };

    export declare type IDbModelCellLinks = {
        namespaces: IDbModelNs[];
    };

    export declare type IDbModelCellChilden = IModelChildrenSchema;

    export declare type IDbModelRow<P extends O = any> =
    IModel<IDbModelRowProps<P>, IDbModelRowDoc<P>, IDbModelRowLinks,
    IDbModelRowChildren>;

    export declare type IDbModelRowProps<P extends O = any> =
    IRowData<IDbModelRowDataProps<P>>;

    export declare type IDbModelRowDataProps<P extends O = any> = IRowProps & P;

    export declare type IDbModelRowDoc<P extends O = any> = IDbModelRowProps<P>;

    export declare type IDbModelRowLinks = IModelLinksSchema;

    export declare type IDbModelRowChildren = IModelChildrenSchema;

    export declare type IDbModelColumn<P extends O = any> =
    IModel<IDbModelColumnProps<P>, IDbModelColumnDoc<P>, IDbModelColumnLinks,
    IDbModelColumnChildren>;

    export declare type IDbModelColumnProps<P extends O = any> =
    IColumnData<IDbModelColumnDataProps<P>>;

    export declare type IDbModelColumnDataProps<P extends O = any> =
    IColumnProps & P;

    export declare type IDbModelColumnDoc<P extends O = any> =
    IDbModelColumnProps<P>;

    export declare type IDbModelColumnLinks = IModelLinksSchema;

    export declare type IDbModelColumnChildren = IModelChildrenSchema;

    export declare type IDbModelFile = IModel<IDbModelFileProps,
    IDbModelFileDataProps, IDbModelFileLinks, IDbModelFileChildren>;

    export declare type IDbModelFileProps = IFileData;

    export declare type IDbModelFileDataProps = IDbModelFileProps;

    export declare type IDbModelFileLinks = IModelLinksSchema;

    export declare type IDbModelFileChildren = IModelChildrenSchema;

    export {};
  types.file.d.ts: >-
    export declare type IFileData = {
        props: IFileProps;
        hash?: string;
        error?: IError;
    };

    export declare type IFileProps = {
        mimetype?: string;
        location?: string;
        bytes?: number;
        integrity?: IFileIntegrity;
    };

    export declare type FileIntegrityStatus = 'UPLOADING' | 'VALID' | 'INVALID'
    | 'INVALID/fileMissing' | 'INVALID/filehash' | 'INVALID/s3:etag';

    export declare type IFileIntegrity = {
        status: FileIntegrityStatus;
        uploadedAt?: number;
        filehash?: string;
        's3:etag'?: string;
    };

    export declare type IFilePresignedUploadUrl = {
        method: 'POST';
        expiresAt: number;
        filename: string;
        uri: string;
        url: string;
        props: {
            [key: string]: string;
        };
    };
  types.fs.d.ts: >-
    import * as s3 from '@platform/fs.s3.types';

    import { IFsError } from '../types.Error';

    export declare type FsType = FsTypeLocal | FsTypeS3;

    export declare type FsTypeLocal = 'LOCAL';

    export declare type FsTypeS3 = 'S3';

    export declare type IFileSystem = IFsS3 | IFsLocal;

    export declare type IFsLocal = IFsMembers<FsTypeLocal, IFsInfoLocal,
    IFsReadLocal, IFsWriteLocal, IFsDeleteLocal>;

    export declare type IFsS3 = IFsMembers<FsTypeS3, IFsInfoS3, IFsReadS3,
    IFsWriteS3, IFsDeleteS3> & {
        bucket: string;
    };

    declare type IFsMembers<T extends FsType, I extends IFsMeta, R extends
    IFsRead, W extends IFsWrite, D extends IFsDelete> = {
        type: T;
        root: string;
        resolve(uri: string, options?: IFsResolveArgs): IFsLocation;
        info(uri: string): Promise<I>;
        read(uri: string): Promise<R>;
        write(uri: string, data: Uint8Array, options?: {
            filename?: string;
        }): Promise<W>;
        delete(uri: string | string[]): Promise<D>;
    };

    export declare type IFsLocation = {
        path: string;
        props: {
            [key: string]: string;
        };
    };

    export declare type IFsResolveArgs = IFsResolveDefaultArgs |
    IFsResolveSignedGetArgs | IFsResolveSignedPutArgs |
    IFsResolveSignedPostArgs;

    export declare type IFsResolveDefaultArgs = {
        type: 'DEFAULT';
    };

    export declare type IFsResolveSignedGetArgs = s3.S3SignedUrlGetObjectOptions
    & {
        type: 'SIGNED/get';
    };

    export declare type IFsResolveSignedPutArgs = s3.S3SignedUrlPutObjectOptions
    & {
        type: 'SIGNED/put';
    };

    export declare type IFsResolveSignedPostArgs = s3.S3SignedPostOptions & {
        type: 'SIGNED/post';
    };

    declare type IFsMetaCommon = {
        path: string;
        location: string;
        hash: string;
        bytes: number;
    };

    export declare type IFsMeta = IFsMetaLocal | IFsMetaS3;

    export declare type IFsMetaLocal = IFsMetaCommon;

    export declare type IFsMetaS3 = IFsMetaCommon & {
        's3:etag'?: string;
    };

    export declare type IFsFileData<I extends IFsMeta = IFsMeta> = I & {
        data: Uint8Array;
    };

    declare type IFsInfoCommon = {
        uri: string;
        exists: boolean;
    };

    declare type IFsReadCommon = {
        uri: string;
        ok: boolean;
        status: number;
        error?: IFsError;
    };

    declare type IFsWriteCommon = {
        uri: string;
        ok: boolean;
        status: number;
        error?: IFsError;
    };

    declare type IFsDeleteCommon = {
        ok: boolean;
        status: number;
        uris: string[];
        locations: string[];
        error?: IFsError;
    };

    export declare type IFsInfo = IFsInfoLocal | IFsInfoS3;

    export declare type IFsRead = IFsReadLocal | IFsReadS3;

    export declare type IFsWrite = IFsWriteLocal | IFsWriteS3;

    export declare type IFsDelete = IFsDeleteLocal | IFsDeleteS3;

    export declare type IFsInfoLocal = IFsInfoCommon & IFsMetaLocal;

    export declare type IFsReadLocal = IFsReadCommon & {
        file?: IFsFileData<IFsMetaLocal>;
    };

    export declare type IFsWriteLocal = IFsWriteCommon & {
        file: IFsFileData<IFsMetaLocal>;
    };

    export declare type IFsDeleteLocal = IFsDeleteCommon;

    export declare type IFsInfoS3 = IFsInfoCommon & IFsMetaS3;

    export declare type IFsReadS3 = IFsReadCommon & {
        file?: IFsFileData<IFsMetaS3>;
        's3:etag'?: string;
    };

    export declare type IFsWriteS3 = IFsWriteCommon & {
        file: IFsFileData<IFsMetaS3>;
        's3:etag'?: string;
    };

    export declare type IFsDeleteS3 = IFsDeleteCommon;

    export {};
  types.fs.sync.d.ts: |-
    declare type O = Record<string, unknown>;
    export declare type IFilesystemSync = O;
    export {};
  types.func.d.ts: >-
    export declare type FuncParam = Json | undefined;

    export declare type FuncResponse = any;

    export declare type FuncInvoker = (args: {
        params: FuncParam[];
    }) => Promise<FuncResponse>;

    export declare type GetFunc = (args: IGetFuncArgs) => Promise<FuncInvoker |
    undefined>;

    export declare type IGetFuncArgs = {
        namespace: string;
        name: string;
    };

    export declare type FuncPromise<T> = Promise<T> & {
        eid: string;
    };

    export declare type IFuncResponse<T = any> = {
        ok: boolean;
        eid: string;
        elapsed: number;
        type: RefTarget;
        cell: string;
        formula: string;
        data?: T;
        error?: IFuncError;
    };

    export declare type IFuncResponseMap = {
        [key: string]: IFuncResponse;
    };

    export declare type IFuncManyResponse = {
        ok: boolean;
        eid: string;
        elapsed: number;
        list: IFuncResponse[];
        map: IFuncResponseMap;
    };

    export declare type IFuncTable = {
        cache: IMemoryCache;
        getCells: GetCells;
        refsTable: IRefsTable;
        getFunc: GetFunc;
        calculate(args?: {
            cells?: string | string[];
            event$?: Subject<FuncEvent>;
        }): FuncPromise<IFuncTableResponse>;
    };

    export declare type IFuncTableResponse = {
        ok: boolean;
        eid: string;
        elapsed: number;
        list: IFuncResponse[];
        map: ICellMap;
    };

    export declare type FuncEvent = FuncOneEvent | FuncManyEvent;

    export declare type FuncOneEvent = IFuncBeginEvent | IFuncEndEvent;

    export declare type FuncManyEvent = IFuncManyBeginEvent | IFuncManyEndEvent;

    export declare type IFuncBeginEvent = {
        type: 'FUNC/begin';
        payload: IFuncBegin;
    };

    export declare type IFuncBegin = {
        eid: string;
        cell: string;
        formula: string;
    };

    export declare type IFuncEndEvent = {
        type: 'FUNC/end';
        payload: IFuncEnd;
    };

    export declare type IFuncEnd = IFuncResponse;

    export declare type IFuncManyBeginEvent = {
        type: 'FUNC/many/begin';
        payload: IFuncManyBegin;
    };

    export declare type IFuncManyBegin = {
        eid: string;
        cells: string[];
    };

    export declare type IFuncManyEndEvent = {
        type: 'FUNC/many/end';
        payload: IFuncManyEnd;
    };

    export declare type IFuncManyEnd = IFuncManyResponse;
  types.func.sys.d.ts: |-
    declare type O = Record<string, unknown>;
    export declare type IFuncSys = O;
    export {};
  types.links.d.ts: >-
    export declare type ILinkKey = {
        prefix: string;
        key: string;
        path: string;
        dir: string;
        name: string;
        ext: string;
    };

    export declare type ILinkValue<U extends IUri, Q extends ILinkQuery> = {
        uri: U;
        value: string;
        query: Q;
    };

    export declare type ILink<U extends IUri, Q extends ILinkQuery> = ILinkKey &
    ILinkValue<U, Q>;

    export declare type ILinkQuery = Record<string, string | boolean>;

    export declare type IFileLink = ILink<IFileUri, IFileLinkQuery> & {
        toString: FileLinkToString;
    };

    export declare type IFileLinkQuery = ILinkQuery & {
        hash?: string;
        status?: FileLinkQueryStatus;
    };

    export declare type FileLinkQueryStatus = 'uploading';

    export declare type FileLinkToString = (options?: {
        hash?: string | null;
        status?: string | null;
    }) => string;

    export declare type IRefLink<U extends IRefLinkUri = IRefLinkUri> = ILink<U,
    IRefLinkQuery> & {
        toString: RefLinkToString;
    };

    export declare type IRefLinkUri = INsUri | ICellUri | IColumnUri | IRowUri;

    export declare type IRefLinkQuery = ILinkQuery & {
        hash?: string;
    };

    export declare type RefLinkToString = (options?: {
        hash?: string | null;
    }) => string;
  types.map.d.ts: >-
    export declare type IMap<V = any> = {
        [key: string]: V | undefined;
    };

    export declare type ICellMap<T extends ICellData = ICellData> = IMap<T>;

    export declare type IColumnMap<T extends IColumnData = IColumnData> =
    IMap<T>;

    export declare type IRowMap<T extends IRowData = IRowData> = IMap<T>;

    export declare type IFileMap<T extends IFileData = IFileData> = IMap<T>;
  types.ns.d.ts: >-
    export declare type INs = {
        id: string;
        props?: INsProps;
        hash?: string;
    };

    export declare type INsProps = {
        title?: string;
        schema?: string;
        type?: INsType;
    };

    export declare type INsData<V extends ICellData = ICellData, C extends
    IColumnData = IColumnData, R extends IRowData = IRowData, F extends
    IFileData = IFileData> = INsDataChildren<V, C, R, F> & {
        ns: INs;
    };

    export declare type INsDataCoord<V extends ICellData = ICellData, C extends
    IColumnData = IColumnData, R extends IRowData = IRowData> = {
        cells: ICellMap<V>;
        columns: IColumnMap<C>;
        rows: IRowMap<R>;
    };

    export declare type INsDataChildren<V extends ICellData = ICellData, C
    extends IColumnData = IColumnData, R extends IRowData = IRowData, F extends
    IFileData = IFileData> = INsDataCoord<V, C, R> & {
        files: IFileMap<F>;
    };

    export declare type INsTotals = {
        cells: number;
        rows: number;
        columns: number;
        files: number;
    };

    export declare type NsTotalKey = keyof INsTotals;
  types.range.d.ts: >-
    export declare type CoordRangeType = 'ALL' | 'CELL' | 'COLUMN' | 'ROW' |
    'PARTIAL_COLUMN' | 'PARTIAL_ROW' | 'PARTIAL_ALL';
  types.refs.d.ts: >-
    export declare type RefTarget = 'VALUE' | 'FUNC' | 'REF' | 'RANGE' |
    'UNKNOWN';

    export declare type RefDirection = 'IN' | 'OUT';

    export declare type RefGetValue = (key: string) => Promise<string |
    undefined>;

    export declare type RefGetKeys = () => Promise<string[]>;

    export declare type IRefs = {
        in: IRefsIn;
        out: IRefsOut;
    };

    export declare type IRefsUpdateArgs = {
        key: string;
        from?: string;
        to?: string;
    };

    export declare type RefsTableUpdate = {
        ok: boolean;
        changed: IRefsUpdateArgs[];
        keys: string[];
        refs: IRefs;
        errors: IRefError[];
    };

    export declare type IRefsTable = {
        event$: Observable<RefsTableEvent>;
        cache: IMemoryCache;
        refs(args?: {
            range?: string | string[];
            force?: boolean;
        }): Promise<IRefs>;
        outgoing(args?: {
            range?: string | string[];
            force?: boolean;
        }): Promise<IRefsOut>;
        incoming(args?: {
            range?: string | string[];
            force?: boolean;
            outRefs?: IRefsOut;
        }): Promise<IRefsIn>;
        reset(args?: {
            cache?: RefDirection[];
        }): IRefsTable;
        update(args: IRefsUpdateArgs | IRefsUpdateArgs[]): Promise<RefsTableUpdate>;
    };

    export declare type IRefsOut = {
        [key: string]: IRefOut[];
    };

    export declare type IRefOut = {
        target: RefTarget;
        path: string;
        param?: string;
        error?: IRefError;
    };

    export declare type IRefsIn = {
        [key: string]: IRefIn[];
    };

    export declare type IRefIn = {
        cell: string;
    };

    export declare type RefsTableEvent = IRefsTableGetKeysEvent |
    IRefsTableGetValueEvent | IRefsTableUpdateEvent;

    export declare type IRefsTableGetKeysEvent = {
        type: 'REFS/table/getKeys';
        payload: IRefsTableGetKeys;
    };

    export declare type IRefsTableGetKeys = {
        keys: string[];
        isModified: boolean;
        modify(keys: string[]): void;
    };

    export declare type IRefsTableGetValueEvent = {
        type: 'REFS/table/getValue';
        payload: IRefsTableGetValue;
    };

    export declare type IRefsTableGetValue = {
        key: string;
        value?: string;
        isModified: boolean;
        modify(value?: string): void;
    };

    export declare type IRefsTableUpdateEvent = {
        type: 'REFS/table/update';
        payload: RefsTableUpdate;
    };
  types.row.d.ts: |-
    export declare type IRowProps = {
        title?: string;
    };
    export declare type IRowData<P extends IRowProps = IRowProps> = {
        props?: P;
        hash?: string;
        error?: IError;
    };
  types.value.d.ts: export declare type CellValue = Json;
