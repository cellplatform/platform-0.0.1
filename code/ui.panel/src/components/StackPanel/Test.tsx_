import { IStackPanel, IStackPanelProps, StackPanel, StackPanelSlideEvent } from '.';
// import { Actions, color, css, Foo, log, R, React } from '../../test';

type P = IStackPanelProps;

const TestPanel = (props: { label: string }) => (
  <Foo style={{ flex: 1, margin: 5 }} children={props.label} />
);

const panels: IStackPanel[] = [
  { el: <TestPanel label={'one'} />, offsetOpacity: 0 },
  { el: <TestPanel label={'two'} />, offsetOpacity: 0 },
  { el: <TestPanel label={'three'} />, offsetOpacity: 0 },
];

/**
 * Test Actions.
 */
const actions = Actions.create<P>({ id: 'test.StackPanel' })
  .props({ panels })
  .header('nav')
  .add('prev', e => {
    const { panels = [], index = 0 } = e.prevProps;
    e.props({ index: R.clamp(0, panels.length - 1, index - 1) });
  })
  .add('next', e => {
    const { panels = [], index = 0 } = e.prevProps;
    e.props({ index: R.clamp(0, panels.length - 1, index + 1) });
  })

  .header('panels')
  .add('undefined', async e => {
    e.props({ panels: undefined });
  })
  .add('1 panel', async e => {
    e.props({ panels: [...panels.slice(0, 1)] });
  })
  .add('3 panels', async e => {
    e.props({ panels: [...panels] });
  })

  .header('index')
  .add('index: 0', e => e.props({ index: 0 }))
  .add('index: 1', e => e.props({ index: 1 }))
  .add('index: 2', e => e.props({ index: 2 }))

  .header('duration')
  .add('200 (default)', e => e.props({ duration: 200 }))
  .add('1500 ', e => e.props({ duration: 1500 }))
  .add('3000 ', e => e.props({ duration: 3000 }));

/**
 * Test View.
 */
export class Content extends React.PureComponent {
  public render() {
    const styles = {
      base: css({
        flex: 1,
        display: 'flex',
        justifyContent: 'center',
        background: color.format(-0.03),
      }),
      panel: css({
        width: 350,
        display: 'flex',
        boxSizing: 'border-box',
        background: 'white',
      }),
    };

    return (
      <div {...styles.base}>
        <div {...styles.panel}>
          <StackPanel {...this.props} style={styles.panel} onSlide={this.handleSlide} />
        </div>
      </div>
    );
  }

  private handleSlide = (e: StackPanelSlideEvent) => {
    log.info('!! onSlide', e);
  };
}

export const Test = actions.component(Content);
